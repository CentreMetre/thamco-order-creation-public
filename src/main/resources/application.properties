spring.application.name=creation

spring.sql.init.mode=${DB_SQL_INIT_MODE}
spring.h2.console.enabled=${DB_ENABLE_H2_CONSOLE:false}

#Having none makes it so the service doesn't depend on db being up
spring.jpa.hibernate.ddl-auto=${DB_HIBERNATE_DDL_AUTO}

spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
#Hard coded to postgresql so that it cant to be accidentally changed
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

server.port=${CREATION_PORT:59000}
server.address=${SERVER_ADDRESS:0.0.0.0}

#Resilience4j
resilience4j.circuitbreaker.instances.thamco_orders_postgres.register-health-indicator=${CREATION_CIRCUIT_BREAKER_HEALTH_INDICATOR:true}
resilience4j.circuitbreaker.instances.thamco_orders_postgres.failure-rate-threshold=${CREATION_CIRCUIT_BREAKER_FAIL_RATE_THRESHOLD:50}
resilience4j.circuitbreaker.instances.thamco_orders_postgres.sliding-window-size=${CREATION_CIRCUIT_BREAKER_SLIDING_WINDOW_SIZE:100}
resilience4j.circuitbreaker.instances.thamco_orders_postgres.wait-duration-in-open-state=${CREATION_CIRCUIT_BREAKER_WAIT_DURATION_IN_OPEN_STATE:10000ms}